# # version: '3.8'
# services:
#   zookeeper:
#     image: confluentinc/cp-zookeeper:7.4.0
#     hostname: zookeeper
#     container_name: swiftlogistics-zookeeper
#     ports:
#       - "2181:2181"
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     volumes:
#       - zookeeper-data:/var/lib/zookeeper/data
#       - zookeeper-log:/var/lib/zookeeper/log
#     networks:
#       - swiftlogistics-network

#   kafka:
#     image: confluentinc/cp-kafka:7.4.0
#     hostname: kafka
#     container_name: swiftlogistics-kafka
#     depends_on:
#       - zookeeper
#     ports:
#       - "9092:9092"
#       - "9101:9101"
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#       KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#       KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
#       KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
#       KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
#       KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
#       KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
#       KAFKA_LOG_RETENTION_HOURS: 168
#       KAFKA_LOG_SEGMENT_BYTES: 1073741824
#       KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
#     volumes:
#       - kafka-data:/var/lib/kafka/data
#     networks:
#       - swiftlogistics-network
#     healthcheck:
#       test: kafka-broker-api-versions --bootstrap-server kafka:29092
#       interval: 30s
#       timeout: 10s
#       retries: 5

#   kafka-ui:
#     image: provectuslabs/kafka-ui:latest
#     container_name: swiftlogistics-kafka-ui
#     depends_on:
#       - kafka
#     ports:
#       - "8080:8080"
#     environment:
#       KAFKA_CLUSTERS_0_NAME: swiftlogistics
#       KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
#       KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
#     networks:
#       - swiftlogistics-network

#   init-kafka:
#     image: confluentinc/cp-kafka:7.4.0
#     depends_on:
#       - kafka
#     entrypoint: [ '/bin/sh', '-c' ]
#     command: |
#       "
#       # blocks until kafka is reachable
#       kafka-topics --bootstrap-server kafka:29092 --list

#       echo -e 'Creating kafka topics'
#       kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user-events --replication-factor 1 --partitions 3
#       kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order-events --replication-factor 1 --partitions 3
#       kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic driver-events --replication-factor 1 --partitions 3
#       kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic tracking-events --replication-factor 1 --partitions 3
#       kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic route-events --replication-factor 1 --partitions 3
#       kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic notification-events --replication-factor 1 --partitions 3

#       echo -e 'Successfully created the following topics:'
#       kafka-topics --bootstrap-server kafka:29092 --list
#       "
#     networks:
#       - swiftlogistics-network

# volumes:
#   zookeeper-data:
#     driver: local
#   zookeeper-log:
#     driver: local
#   kafka-data:
#     driver: local

# networks:
#   swiftlogistics-network:
#     driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: swiftlogistics-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - swiftlogistics-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: swiftlogistics-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - swiftlogistics-network
    healthcheck:
      test: "kafka-broker-api-versions --bootstrap-server localhost:9092"
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: swiftlogistics-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: swiftlogistics
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: localhost:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - swiftlogistics-network

  init-kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - kafka
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      echo 'Waiting for Kafka to start...'
      while ! kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1; do
        sleep 2
      done

      echo 'Creating Kafka topics...'
      for topic in user-events order-events driver-events tracking-events route-events notification-events; do
        kafka-topics --bootstrap-server localhost:9092 --create --if-not-exists --topic $topic --replication-factor 1 --partitions 3
      done

      echo 'Topics created successfully:'
      kafka-topics --bootstrap-server localhost:9092 --list
      "
    networks:
      - swiftlogistics-network

volumes:
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local

networks:
  swiftlogistics-network:
    driver: bridge
